/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.myapp;

import com.codename1.components.ImageViewer;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.NetworkEvent;
import com.codename1.io.NetworkManager;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BoxLayout;

import com.codename1.ui.plaf.RoundRectBorder;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.util.Resources;
import com.mycompany.myapp.entity.Prestataire;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;

import java.util.ArrayList;
import java.util.Map;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class Prestataires {

    private Form form;
    private Resources theme;
    java.util.List<Map<String, Object>> services;
    java.util.List<Map<String, Object>> allprestataire;
    Picker pickerservice;
    ArrayList<Prestataire> prestataires;
    InfiniteContainer ic;

    public Prestataires(Resources theme) {
        this.theme = theme;
        form = new Form(BoxLayout.y());
        form.getToolbar().hideToolbar();
        getService();
        pickerservice = new Picker();
        Container container = new Container();
        Button buttonrecherche = new Button("Recherche");
        container.add(pickerservice).add(buttonrecherche);
        Label validatorrecherche = new Label("selectionner votre besoin");
        form.add(container).add(validatorrecherche);
        validatorrecherche.setVisible(false);
        buttonrecherche.addActionListener((a) -> {
            if (pickerservice.getValue() != null) {
                System.out.print(pickerservice.getValue().toString());
                for (Map<String, Object> service : services) {
                    if (service.get("description").toString().equals(pickerservice.getValue().toString())) {
                        getAllPrestataireByService((int) (Double.parseDouble(service.get("id").toString())));
                    }
                }
            } else {
                validatorrecherche.setVisible(true);
                validatorrecherche.getStyle().setFgColor(0Xef5350);
                form.refreshTheme();
            }
        });
        pickerservice.addActionListener((a) -> {
            validatorrecherche.setVisible(false);
        });
        prestataires = new ArrayList<>();
        getAllPrestataire();
        ic = new InfiniteContainer() {
            Component[] cmps;

            @Override
            public Component[] fetchComponents(int index, int amount) {

                System.out.println(amount);
                if (index == 0) {
                    cmps = new Component[prestataires.size()];
                }

                if (index + amount > prestataires.size()) {
                    amount = prestataires.size() - index;
                }

                if (amount <= 0) {
                    return null;
                }

                for (int i = 0; i < prestataires.size(); i++) {
                    Container container = new Container(BoxLayout.x());
                    Image image = theme.getImage("avatar.png").scaled(172, 172);
                    ImageViewer imageViewer = new ImageViewer(image);
                    container.add(imageViewer);

                    Container container2 = new Container(BoxLayout.y());
                    Container container3 = new Container();
                    Container container4 = new Container();

                    Label nom = new Label(prestataires.get(i).getNom() + " " + prestataires.get(i).getPrenom());
                    Button buttondetail = new Button("détail");
                    container4.add(nom).add(buttondetail);
                    Label service = new Label(prestataires.get(i).getService());
                    Button buttondemande = new Button("demande");

                    container3.add(service).add(buttondemande);

                    container2.add(container4).add(container3);
                    container.add(container2);
                    Style containerStyle = container.getAllStyles();
                    containerStyle.setMargin(10, 10, 10, 10);
                    containerStyle.setBorder(
                            RoundRectBorder.create().cornerRadius(2).
                                    strokeColor(0).
                                    strokeOpacity(100).
                                    stroke(new Stroke(2, Stroke.CAP_SQUARE, Stroke.CAP_SQUARE, 1))
                    );

                    cmps[i] = container;

                }

                return cmps;
            }
        };
        form.add(ic);
    }

    public Form getForm() {
        return form;
    }

    private void getService() {

        try {
            ConnectionRequest req = new ConnectionRequest();
            req.setUrl(MyApplication.baseUrl + "/service");
            req.setPost(false);
            req.addResponseListener(new ActionListener<NetworkEvent>() {
                @Override
                public void actionPerformed(NetworkEvent r) {
                    try {
                        Map<String, Object> res = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getConnectionRequest().getResponseData()), "UTF-8"));
                        services = (java.util.List<Map<String, Object>>) res.get("root");

                        String[] listservice = new String[services.size()];
                        int i = 0;
                        for (Map<String, Object> obj : services) {
                            listservice[i] = obj.get("description").toString();
                            i++;
                        }
                        pickerservice.setStrings(listservice);
                        pickerservice.setText("Catégorie de votre besoin");
                    } catch (Exception ex) {
                    }
                }
            });
            NetworkManager.getInstance().addToQueue(req);
        } catch (Exception ex) {
        }
    }

    private void getAllPrestataire() {
        try {
            ConnectionRequest req = new ConnectionRequest();
            req.setUrl(MyApplication.baseUrl + "/prestataire");
            req.setPost(false);
            req.addResponseListener(new ActionListener<NetworkEvent>() {
                @Override
                public void actionPerformed(NetworkEvent r) {
                    try {
                        Map<String, Object> res = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getConnectionRequest().getResponseData()), "UTF-8"));
                        java.util.List<Map<String, Object>> allprestataire = (java.util.List<Map<String, Object>>) res.get("root");

                        for (Map<String, Object> p : allprestataire) {
                            System.out.println(allprestataire);
                            Prestataire prestataire = new Prestataire();
                            System.out.println((Double.parseDouble(p.get("id").toString())));
                            prestataire.setId((int) (Double.parseDouble(p.get("id").toString())));
                            prestataire.setNom(p.get("nom").toString());
                            prestataire.setPrenom(p.get("prenom").toString());
                            prestataire.setTel(p.get("telephone").toString());
                            prestataire.setEmail(p.get("email").toString());
                            if (p.get("description") != null) {
                                prestataire.setDescription(p.get("description").toString());
                            }
                            prestataire.setNbpiont((int) (Double.parseDouble(p.get("numberPiont").toString())));
                            prestataire.setService(p.get("dservice").toString());
                            prestataires.add(prestataire);
                            System.out.println(p);
                        }

                    } catch (Exception ex) {
                    }
                }
            });
            NetworkManager.getInstance().addToQueue(req);
        } catch (Exception ex) {
        }
    }

    private void getAllPrestataireByService(int idservice) {
        prestataires.removeAll(prestataires);
        try {
            ConnectionRequest req = new ConnectionRequest();
            req.setUrl(MyApplication.baseUrl + "/prestataire/getPrestatairByService/" + idservice);
            req.setPost(false);
            req.addResponseListener(new ActionListener<NetworkEvent>() {
                @Override
                public void actionPerformed(NetworkEvent r) {
                    try {
                        Map<String, Object> res = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getConnectionRequest().getResponseData()), "UTF-8"));
                        allprestataire = (java.util.List<Map<String, Object>>) res.get("root");

                        for (Map<String, Object> p : allprestataire) {
                            System.out.println(allprestataire);
                            Prestataire prestataire = new Prestataire();
                            System.out.println((Double.parseDouble(p.get("id").toString())));
                            prestataire.setId((int) (Double.parseDouble(p.get("id").toString())));
                            prestataire.setNom(p.get("nom").toString());
                            prestataire.setPrenom(p.get("prenom").toString());
                            prestataire.setTel(p.get("telephone").toString());
                            prestataire.setEmail(p.get("email").toString());
                            if (p.get("description") != null) {
                                prestataire.setDescription(p.get("description").toString());
                            }
                            prestataire.setNbpiont((int) (Double.parseDouble(p.get("numberPiont").toString())));
                            prestataire.setService(p.get("dservice").toString());
                            prestataires.add(prestataire);
                            System.out.println(p);
                        }
                        ic.refresh();
                    } catch (Exception ex) {
                    }
                }
            });
            NetworkManager.getInstance().addToQueue(req);
        } catch (Exception ex) {
        }
    }
}
